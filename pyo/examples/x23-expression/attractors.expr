// Chaotic Attractors

// Lorenz
// usage: (lorenz pitch chaos)
(define lorenz (
        (let #pit (+ (* $1 749) 1))
        (let #c (+ (* $2 2.5) 0.5))

        (let #delta (* (/ 1 (sr)) #pit))

        (let #a 10)
        (let #b 28)

        (let #dx (* #a (- #y #x)))
        (let #dy (- (* #x (- #b #z)) #y))
        (let #dz (- (* #x #y) (* #c #z)))

        (let #x (+ #x (* #dx #delta)) 1)
        (let #y (+ #y (* #dy #delta)) 1)
        (let #z (+ #z (* #dz #delta)) 1)

        (complex (* #x 0.044) (* #y 0.0328))
    )
)

// Rossler
// usage: (rossler pitch chaos)
(define rossler (
        (let #pit (+ (* $1 999) 1))
        (let #c (+ (* $2 7) 3))

        (let #delta (* (/ 2.91 (sr)) #pit))

        (let #a 0.15)
        (let #b 0.2)

        (let #dx (- (neg #y) #z))
        (let #dy (+ #x (* #a #y)))
        (let #dz (+ #b (* #z (- #x #c))))

        (let #x (+ #x (* #dx #delta)) 1)
        (let #y (+ #y (* #dy #delta)) 1)
        (let #z (+ #z (* #dz #delta)) 1)

        (complex (* #x 0.054) (* #y 0.0569))
    )
)

(define att-clip (
        (max (min $1 $3) $2)
    )
)

// Chen-Lee
// usage: (chen-lee pitch chaos)
(define chen-lee (
        (let #pit (+ (* $1 124) 1))
        (let #c (- 4 (* $2 1.49)))

        (let #delta (* (/ 1 (sr)) #pit))

        (let #a 5)
        (let #b 10)

        (let #dx (+ (* (neg #y) #z) (* #a #x)))
        (let #dy (- (* #x #z) (* #b #y)))
        (let #dz (- (/ (* #x #y) 3) (* #c #z)))

        (let #x (att-clip (+ #x (* #dx #delta)) -50 50) 1)
        (let #y (att-clip (+ #y (* #dy #delta)) -50 50) 1)
        (let #z (+ #z (* #dz #delta)) 1)

        (complex (* #x 0.02) (* #y 0.02))
    )
)

// Four-Wing
// usage: (four-wing pitch chaos)
(define four-wing (
        (let #pit (+ (* $1 999) 1))
        (let #c (+ (* $2 -0.2) -0.4))

        (let #delta (* (/ 1 (sr)) #pit))

        (let #a 0.2)
        (let #b 0.01)

        (let #dx (+ (* #a #x) (* #y #z)))
        (let #dy (- (+ (* #b #x) (* #c #y)) (* #x #z)))
        (let #dz (- (neg #z) (* #x #y)))

        (let #x (+ #x (* #dx #delta)) 1.3)
        (let #y (+ #y (* #dy #delta)) -0.18)
        (let #z (+ #z (* #dz #delta)) 0.01)

        (complex (* #x 0.3) (* #y 0.3))
    )
)

// Thomas
// usage: (thomas pitch chaos)
(define thomas (
        (let #pit (+ (* $1 1900) 100))
        (let #c (+ (* $2 0.0125) 0.18))
        (let #b 0.208186)

        (let #delta (* (/ 1 (sr)) #pit))

        (let #dx (- (sin #y) (* #b #x)))
        (let #dy (- (sin #z) (* #b #y)))
        (let #dz (- (sin #x) (* #c #z)))

        (let #x (+ #x (* #dx #delta)) 1.1)
        (let #y (+ #y (* #dy #delta)) 1.1)
        (let #z (+ #z (* #dz #delta)) -0.01)

        (complex (* #x 0.2) (* #y 0.2))
    )
)

// Sprott
// usage: (sprott pitch chaos)
(define sprott (
        (let #pit (+ (* $1 999) 1))
        (let #b (+ (* $2 2.5) 1.125))

        (let #delta (* (/ 1 (sr)) #pit))

        (let #a 2.07)
        //(let #b 1.89)

        (let #dx (+ (+ #y (* #a (* #x #y))) (* #x #z)))
        (let #dy (+ (- 1 (* #b (* #x #x))) (* #y #z)))
        (let #dz (- (- #x (* #x #x)) (* #y #y)))

        (let #x (+ #x (* #dx #delta)) 0.53)
        (let #y (+ #y (* #dy #delta)) 0.47)
        (let #z (+ #z (* #dz #delta)) -0.54)

        (complex (* #x 0.4) (* #y 0.35))
    )
)

// Dadras
// usage: (dadras pitch chaos)
(define dadras (
        (let #pit (+ (* $1 199) 1))
        (let #e (+ (* $2 1) 9))

        (let #a 3)
        (let #b 2.7)
        (let #c 1.7)
        (let #d 2)
        //(let #e 9)

        (let #delta (* (/ 1 (sr)) #pit))

        (let #dx (+ (- #y (* #a #x)) (* (* #b #y) #z)))
        (let #dy (+ (- (* #c #y) (* #x #z)) #z))
        (let #dz (- (* (* #d #x) #y) (* #e #z)))

        (let #x (+ #x (* #dx #delta)) 1.1)
        (let #y (+ #y (* #dy #delta)) 2.1)
        (let #z (+ #z (* #dz #delta)) -2)

        (complex (* #x 0.035) (* #y 0.035))
    )
)
